(()=>{"use strict";var n={917:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n/*Opera sets a red outline on focussed buttons which messes with animations or transitions. This stops Opera from doing so*/\r\nbutton:focus, input:focus {\r\n    border:none;\r\n    outline: none;\r\n}\r\n","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA,2HAA2H;AAC3H;IACI,WAAW;IACX,aAAa;AACjB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n/*Opera sets a red outline on focussed buttons which messes with animations or transitions. This stops Opera from doing so*/\r\nbutton:focus, input:focus {\r\n    border:none;\r\n    outline: none;\r\n}\r\n"],sourceRoot:""}]);const s=i},426:(n,r,e)=>{e.d(r,{Z:()=>m});var t=e(537),o=e.n(t),a=e(645),i=e.n(a),s=e(667),A=e.n(s),c=new URL(e(726),e.b),l=new URL(e(602),e.b),d=new URL(e(921),e.b),p=i()(o()),u=A()(c),h=A()(l),f=A()(d);p.push([n.id,'@font-face {\r\n  font-family: "Poppins";\r\n\r\n  src: url('+u+') format("truetype"),\r\n    url('+h+') format("truetype");\r\n\r\n  font-weight: 400;\r\n\r\n  font-style: normal;\r\n}\r\n\r\n@font-face {\r\n  font-family: "RobotoMono";\r\n\r\n  src: url('+f+') format("truetype");\r\n\r\n  font-weight: 400;\r\n\r\n  font-style: normal;\r\n}\r\n\r\n.video {\r\n  position: fixed;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  min-height: 100%;\r\n}\r\n\r\n.fade {\r\n  position:absolute;\r\n  width: 100%;\r\n  min-height: 100%;\r\n  background-color: rgb(22, 22, 22);\r\n  opacity: 1;\r\n  transition: opacity 0.5s;\r\n}\r\n\r\n.fade.in {\r\n  opacity: 0;\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  max-height: 100vh;\r\n  z-index: 4;\r\n  width: 66%;\r\n  height: 88%;\r\n  border-radius: 30px;\r\n  background: linear-gradient(\r\n    rgba(144, 189, 231, 1) 0%,\r\n    rgba(144, 189, 231, 1) 20%,\r\n    rgba(209, 220, 138, 1) 100%\r\n  );\r\n  /*background: linear-gradient(rgba(169, 204, 237, 1)0%, rgba(169, 204, 237, 1) 25%,rgba(213, 214, 163, 1) 100%);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  opacity: 0;\r\n  transition: transform 0.5s, opacity 0.5s;\r\n}\r\n\r\np {\r\n  font-family: poppins, sans-serif;\r\n  font-size: 24px;\r\n  margin: 10px 0;\r\n}\r\n\r\np.temp {\r\n  font-family: RobotoMono, monospace;\r\n}\r\n\r\nheader {\r\n  display: flex;\r\n  margin: 31px 0px;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n}\r\n\r\n.logo {\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n  gap: 21px;\r\n  align-items: center;\r\n}\r\n\r\n.siteName {\r\n  font-size: 32px;\r\n}\r\n\r\ninput {\r\n  display: inline-block;\r\n}\r\n\r\n.hide {\r\n  display: none;\r\n}\r\n\r\n.wrapperP {\r\n  width: 335px;\r\n}\r\n\r\n.wrapper {\r\n  width: 335px;\r\n  border-radius: 30px;\r\n  box-shadow: 0px 1px 5px 3px rgba(0, 0, 0, 0.15);\r\n  position: absolute;\r\n  background-color: white;\r\n  z-index: 5;\r\n}\r\n\r\n.search {\r\n  border-radius: 30px;\r\n  width: 335px;\r\n  height: 52px;\r\n  padding-left: 10px;\r\n  font-size: 1rem;\r\n  border: none;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);\r\n  font-size: 20px;\r\n  font-weight: 400;\r\n  opacity: 1;\r\n  color: black;\r\n}\r\n\r\n.suggestions {\r\n  margin-top: 5px;\r\n}\r\n\r\n.suggestions p {\r\n  font-size: 20px;\r\n  margin: 0px 0px;\r\n  padding: 10px 10px;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.1);\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n}\r\n\r\n.suggestions p:hover {\r\n  background-color: rgb(243, 243, 243);\r\n}\r\n\r\n.searchIcon {\r\n  position: fixed;\r\n  transform: translate(830%, 18%) scale(1);\r\n  cursor: pointer;\r\n}\r\n\r\n/* Remove x from the search bar */\r\n\r\n/* clears the \'X\' from Internet Explorer */\r\ninput[type="search"]::-ms-clear {\r\n  display: none;\r\n  width: 0;\r\n  height: 0;\r\n}\r\ninput[type="search"]::-ms-reveal {\r\n  display: none;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n/* clears the \'X\' from Chrome */\r\ninput[type="search"]::-webkit-search-decoration,\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-results-button,\r\ninput[type="search"]::-webkit-search-results-decoration {\r\n  display: none;\r\n}\r\n\r\n/* Styling for the toggle switch that switches between celsius/metric and fahrenheit/imperial */\r\n\r\n.toggleSwitch {\r\n  width: 100px;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n  position: absolute;\r\n  left: -5000px;\r\n  top: -5000px;\r\n}\r\n\r\ninput[type="checkbox"] + label {\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput[type="checkbox"] + label::before {\r\n  background-color: rgb(218, 218, 218);\r\n  transition: background-color 0.5s;\r\n}\r\n\r\ninput[type="checkbox"] + label::after {\r\n  background-color: rgb(255, 255, 255);\r\n  transition: background-color 0.5s;\r\n}\r\n\r\n/* general styling celsius state */\r\ninput[type="checkbox"].celsius + label::before {\r\n  content: "";\r\n  width: 5em;\r\n  height: 40px;\r\n  border-radius: 40px;\r\n}\r\n\r\ninput[type="checkbox"].celsius + label::after {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  content: "°C";\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  font-size: 26px;\r\n  font-family: Poppins;\r\n}\r\n\r\n/* general styling fahrenheit state */\r\ninput[type="checkbox"].fahrenheit + label::before {\r\n  content: "";\r\n  width: 5em;\r\n  height: 40px;\r\n  border-radius: 40px;\r\n}\r\n\r\ninput[type="checkbox"].fahrenheit + label::after {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  content: "°F";\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n\r\n  position: absolute;\r\n  transform: translateX(32px);\r\n  font-size: 26px;\r\n  font-family: RobotoMono;\r\n}\r\n\r\n/* Keyframes for hovering over toggle switch in celsius state */\r\n\r\n@keyframes hoverCelsiusAfter {\r\n  100% {\r\n    content: "°F";\r\n\r\n    transform: translateX(16px);\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].hover-enabled:not(:checked):hover + label::after {\r\n  animation: hoverCelsiusAfter 0.4s 0.25s 2 alternate;\r\n}\r\n\r\n/* Keyframes for clicking on toggle switch in celsius state */\r\n\r\n@keyframes setToFahrenheitAfter {\r\n  0% {\r\n    transform: translateX(0);\r\n    content: "°C";\r\n  }\r\n  100% {\r\n    transform: translateX(32px);\r\n    content: "°F";\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].transition-enabled:checked + label::after {\r\n  animation: setToFahrenheitAfter 0.4s 1 normal;\r\n}\r\n\r\n/* Keyframe for clicking on toggle switch in fahrenheit state */\r\n\r\n@keyframes setToCelsiusAfter {\r\n  0% {\r\n    transform: translateX(32px);\r\n    content: "°F";\r\n  }\r\n  100% {\r\n    transform: translateX(0);\r\n    content: "°C";\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].transition-enabled:not(:checked) + label::after {\r\n  animation: setToCelsiusAfter 0.4s 1 normal;\r\n}\r\n\r\ninput[type="checkbox"]:focus + label::before {\r\n  outline: 1px solid black;\r\n}\r\n\r\n/* Keyframes for hovering over toggle switch in fahrenheit state */\r\n\r\n@keyframes hoverFahrenheitAfter {\r\n  100% {\r\n    content: "°C";\r\n    transform: translateX(16px);\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].hover-enabled:checked:hover + label::after {\r\n  animation: hoverFahrenheitAfter 0.4s 0.25s 2 alternate;\r\n}\r\n\r\n.socials {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  gap: 10px;\r\n}\r\n\r\na {\r\n  color:black;\r\n  text-decoration: none;\r\n}\r\n\r\n\r\n\r\n.githubBackground {\r\n  align-items: center;\r\n  background-color: white;\r\n  width: 35px;\r\n  height: 36px;\r\n  border: 1px solid white;\r\n  display: flex;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n}\r\n\r\n.detailed {\r\n  width: 81.6%;\r\n  height: 55%;\r\n  background-color: white;\r\n  border-radius: 30px;\r\n  /*filter: drop-shadow(0 1px 1px black);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);\r\n  transition: background-color 0.8s;\r\n}\r\n\r\n.selectedWeather {\r\n  display: flex;\r\n  width: 84%;\r\n  justify-content: space-between;\r\n  margin-top: 20px;\r\n}\r\n\r\n.weatherData {\r\n  text-align: start;\r\n  font-size: 20px;\r\n}\r\n\r\n.text p,\r\n.variables p {\r\n  font-size: 20px;\r\n}\r\n\r\n.text {\r\n  margin-right: 16px;\r\n}\r\n\r\n.weatherData .temp {\r\n  font-size: 36px;\r\n}\r\n\r\n.iconAndTemp {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.iconAndTemp p {\r\n  font-size: 30px;\r\n  margin-left: 16px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text {\r\n  display: inline-block;\r\n}\r\n\r\n.variables {\r\n  display: inline-block;\r\n}\r\n\r\n.metaData {\r\n  text-align: end;\r\n}\r\n\r\n.metaData .date {\r\n  font-size: 28px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.city {\r\n  font-size: 20px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.time {\r\n  display: flex;\r\n  justify-content: end;\r\n  align-items: center;\r\n  font-size: 20px;\r\n}\r\n\r\n.hourSection {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  overflow-y: scroll;\r\n  max-width: 84%;\r\n  gap: 50px;\r\n  margin-top: 60px;\r\n  -ms-overflow-style: none; /* IE and Edge */\r\n  scrollbar-width: none; /* Firefox */\r\n  padding-top: 20px;\r\n  scroll-snap-type: inline mandatory;\r\n  cursor: grab;\r\n}\r\n\r\n/* Hide scrollbar for Chrome, Safari and Opera */\r\n.hourSection::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.selected {\r\n  transform: translateY(-10%);\r\n}\r\n\r\n.hourData {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  transition: transform 0.3s, left 0.25s;\r\n  position: relative;\r\n  left: 0px;\r\n  user-select: none;\r\n}\r\n\r\n.hourData:hover {\r\n  transform: translateY(-10%);\r\n}\r\n\r\n.hourData .time,\r\n.hourData .icon,\r\n.hourData .temp {\r\n  pointer-events: none;\r\n}\r\n\r\n.daySlider {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 90%;\r\n}\r\n\r\n.daySection {\r\n  display: flex;\r\n  width: 91%;\r\n  gap: 32px;\r\n  overflow-y: scroll;\r\n  padding-top: 38px;\r\n  padding-bottom: 10px;\r\n  -ms-overflow-style: none; /* IE and Edge */\r\n  scrollbar-width: none; /* Firefox */\r\n\r\n  cursor: grab;\r\n}\r\n\r\n/* Hide scrollbar for Chrome, Safari and Opera */\r\n.daySection::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.dayData {\r\n  padding: 10px;\r\n  background-color: white;\r\n  /*filter: drop-shadow(0 1px 1px black);*/\r\n  border-radius: 30px;\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: 150px;\r\n  width: 300px;\r\n  cursor: pointer;\r\n  transition: transform 0.3s, background-color 0.5s;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);\r\n  position: relative;\r\n  left: 0px;\r\n  user-select: none;\r\n  scroll-snap-align: start;\r\n}\r\n\r\n.dayData:hover {\r\n  transform: translateY(-10%);\r\n}\r\n\r\n.metaAndIcon {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n  margin-top: 10px;\r\n  pointer-events: none;\r\n}\r\n\r\n.meta {\r\n  text-align: start;\r\n}\r\n\r\n.weekday {\r\n  font-size: 28px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.meta .date {\r\n  font-size: 18px;\r\n}\r\n\r\n.tempScale {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 60%;\r\n  justify-content: space-around;\r\n  pointer-events: none;\r\n}\r\n\r\n.spacer {\r\n  font-size: 35px;\r\n}\r\n\r\n.backArrow {\r\n  width: 0px;\r\n  height: 0px;\r\n  border-right: 20px solid white;\r\n  border-top: 20px solid transparent;\r\n  border-bottom: 20px solid transparent;\r\n  cursor: pointer;\r\n  margin-right: 20px;\r\n  position: relative;\r\n  right: 0px;\r\n  transition: right 0.2s, margin-right 0.2s, border-right 0.2s, border-top 0.2s,\r\n    border-bottom 0.2s;\r\n}\r\n\r\n.backArrow:active {\r\n  right: 6px !important;\r\n}\r\n\r\n.backArrow:hover {\r\n  border-right-width: 25px;\r\n  border-top-width: 25px;\r\n  border-bottom-width: 25px;\r\n  margin-right: 15px;\r\n  right: 2.5px;\r\n}\r\n\r\n.forwardArrow {\r\n  width: 0px;\r\n  height: 0px;\r\n  border-left: 20px solid white;\r\n  border-top: 20px solid transparent;\r\n  border-bottom: 20px solid transparent;\r\n  cursor: pointer;\r\n  margin-left: 20px;\r\n  position: relative;\r\n  left: 0px;\r\n  transition: left 0.2s, margin-left 0.2s, border-left 0.2s, border-top 0.2s,\r\n    border-bottom 0.2s;\r\n}\r\n\r\n.forwardArrow:active {\r\n  left: 6px !important;\r\n}\r\n\r\n.forwardArrow:hover {\r\n  border-left-width: 25px;\r\n  border-top-width: 25px;\r\n  border-bottom-width: 25px;\r\n  margin-left: 15px;\r\n  left: 2.5px;\r\n}\r\n\r\n#errorWrapper {\r\n  width: 100%;\r\n  height: 90%;\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 23px;\r\n}\r\n\r\n#errorHeading {\r\n  font-size: 32px;\r\n  font-family: poppins;\r\n}\r\n\r\n#errorText {\r\n  font-size: 20px;\r\n  width: 70%;\r\n  line-height: 1.5;\r\n  font-family: poppins;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@font-face {\r\n  font-family: "Poppins";\r\n\r\n  src: url("./media/Poppins-Regular.ttf") format("truetype"),\r\n    url("./media/Poppins-SemiBold.ttf") format("truetype");\r\n\r\n  font-weight: 400;\r\n\r\n  font-style: normal;\r\n}\r\n\r\n@font-face {\r\n  font-family: "RobotoMono";\r\n\r\n  src: url("./media/RobotoMono-Regular.ttf") format("truetype");\r\n\r\n  font-weight: 400;\r\n\r\n  font-style: normal;\r\n}\r\n\r\n.video {\r\n  position: fixed;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  min-height: 100%;\r\n}\r\n\r\n.fade {\r\n  position:absolute;\r\n  width: 100%;\r\n  min-height: 100%;\r\n  background-color: rgb(22, 22, 22);\r\n  opacity: 1;\r\n  transition: opacity 0.5s;\r\n}\r\n\r\n.fade.in {\r\n  opacity: 0;\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  max-height: 100vh;\r\n  z-index: 4;\r\n  width: 66%;\r\n  height: 88%;\r\n  border-radius: 30px;\r\n  background: linear-gradient(\r\n    rgba(144, 189, 231, 1) 0%,\r\n    rgba(144, 189, 231, 1) 20%,\r\n    rgba(209, 220, 138, 1) 100%\r\n  );\r\n  /*background: linear-gradient(rgba(169, 204, 237, 1)0%, rgba(169, 204, 237, 1) 25%,rgba(213, 214, 163, 1) 100%);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  opacity: 0;\r\n  transition: transform 0.5s, opacity 0.5s;\r\n}\r\n\r\np {\r\n  font-family: poppins, sans-serif;\r\n  font-size: 24px;\r\n  margin: 10px 0;\r\n}\r\n\r\np.temp {\r\n  font-family: RobotoMono, monospace;\r\n}\r\n\r\nheader {\r\n  display: flex;\r\n  margin: 31px 0px;\r\n  width: 90%;\r\n  justify-content: space-between;\r\n}\r\n\r\n.logo {\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n  gap: 21px;\r\n  align-items: center;\r\n}\r\n\r\n.siteName {\r\n  font-size: 32px;\r\n}\r\n\r\ninput {\r\n  display: inline-block;\r\n}\r\n\r\n.hide {\r\n  display: none;\r\n}\r\n\r\n.wrapperP {\r\n  width: 335px;\r\n}\r\n\r\n.wrapper {\r\n  width: 335px;\r\n  border-radius: 30px;\r\n  box-shadow: 0px 1px 5px 3px rgba(0, 0, 0, 0.15);\r\n  position: absolute;\r\n  background-color: white;\r\n  z-index: 5;\r\n}\r\n\r\n.search {\r\n  border-radius: 30px;\r\n  width: 335px;\r\n  height: 52px;\r\n  padding-left: 10px;\r\n  font-size: 1rem;\r\n  border: none;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);\r\n  font-size: 20px;\r\n  font-weight: 400;\r\n  opacity: 1;\r\n  color: black;\r\n}\r\n\r\n.suggestions {\r\n  margin-top: 5px;\r\n}\r\n\r\n.suggestions p {\r\n  font-size: 20px;\r\n  margin: 0px 0px;\r\n  padding: 10px 10px;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.1);\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n}\r\n\r\n.suggestions p:hover {\r\n  background-color: rgb(243, 243, 243);\r\n}\r\n\r\n.searchIcon {\r\n  position: fixed;\r\n  transform: translate(830%, 18%) scale(1);\r\n  cursor: pointer;\r\n}\r\n\r\n/* Remove x from the search bar */\r\n\r\n/* clears the \'X\' from Internet Explorer */\r\ninput[type="search"]::-ms-clear {\r\n  display: none;\r\n  width: 0;\r\n  height: 0;\r\n}\r\ninput[type="search"]::-ms-reveal {\r\n  display: none;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n/* clears the \'X\' from Chrome */\r\ninput[type="search"]::-webkit-search-decoration,\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-results-button,\r\ninput[type="search"]::-webkit-search-results-decoration {\r\n  display: none;\r\n}\r\n\r\n/* Styling for the toggle switch that switches between celsius/metric and fahrenheit/imperial */\r\n\r\n.toggleSwitch {\r\n  width: 100px;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n  position: absolute;\r\n  left: -5000px;\r\n  top: -5000px;\r\n}\r\n\r\ninput[type="checkbox"] + label {\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\ninput[type="checkbox"] + label::before {\r\n  background-color: rgb(218, 218, 218);\r\n  transition: background-color 0.5s;\r\n}\r\n\r\ninput[type="checkbox"] + label::after {\r\n  background-color: rgb(255, 255, 255);\r\n  transition: background-color 0.5s;\r\n}\r\n\r\n/* general styling celsius state */\r\ninput[type="checkbox"].celsius + label::before {\r\n  content: "";\r\n  width: 5em;\r\n  height: 40px;\r\n  border-radius: 40px;\r\n}\r\n\r\ninput[type="checkbox"].celsius + label::after {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  content: "°C";\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  font-size: 26px;\r\n  font-family: Poppins;\r\n}\r\n\r\n/* general styling fahrenheit state */\r\ninput[type="checkbox"].fahrenheit + label::before {\r\n  content: "";\r\n  width: 5em;\r\n  height: 40px;\r\n  border-radius: 40px;\r\n}\r\n\r\ninput[type="checkbox"].fahrenheit + label::after {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  content: "°F";\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n\r\n  position: absolute;\r\n  transform: translateX(32px);\r\n  font-size: 26px;\r\n  font-family: RobotoMono;\r\n}\r\n\r\n/* Keyframes for hovering over toggle switch in celsius state */\r\n\r\n@keyframes hoverCelsiusAfter {\r\n  100% {\r\n    content: "°F";\r\n\r\n    transform: translateX(16px);\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].hover-enabled:not(:checked):hover + label::after {\r\n  animation: hoverCelsiusAfter 0.4s 0.25s 2 alternate;\r\n}\r\n\r\n/* Keyframes for clicking on toggle switch in celsius state */\r\n\r\n@keyframes setToFahrenheitAfter {\r\n  0% {\r\n    transform: translateX(0);\r\n    content: "°C";\r\n  }\r\n  100% {\r\n    transform: translateX(32px);\r\n    content: "°F";\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].transition-enabled:checked + label::after {\r\n  animation: setToFahrenheitAfter 0.4s 1 normal;\r\n}\r\n\r\n/* Keyframe for clicking on toggle switch in fahrenheit state */\r\n\r\n@keyframes setToCelsiusAfter {\r\n  0% {\r\n    transform: translateX(32px);\r\n    content: "°F";\r\n  }\r\n  100% {\r\n    transform: translateX(0);\r\n    content: "°C";\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].transition-enabled:not(:checked) + label::after {\r\n  animation: setToCelsiusAfter 0.4s 1 normal;\r\n}\r\n\r\ninput[type="checkbox"]:focus + label::before {\r\n  outline: 1px solid black;\r\n}\r\n\r\n/* Keyframes for hovering over toggle switch in fahrenheit state */\r\n\r\n@keyframes hoverFahrenheitAfter {\r\n  100% {\r\n    content: "°C";\r\n    transform: translateX(16px);\r\n  }\r\n}\r\n\r\ninput[type="checkbox"].hover-enabled:checked:hover + label::after {\r\n  animation: hoverFahrenheitAfter 0.4s 0.25s 2 alternate;\r\n}\r\n\r\n.socials {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  gap: 10px;\r\n}\r\n\r\na {\r\n  color:black;\r\n  text-decoration: none;\r\n}\r\n\r\n\r\n\r\n.githubBackground {\r\n  align-items: center;\r\n  background-color: white;\r\n  width: 35px;\r\n  height: 36px;\r\n  border: 1px solid white;\r\n  display: flex;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n}\r\n\r\n.detailed {\r\n  width: 81.6%;\r\n  height: 55%;\r\n  background-color: white;\r\n  border-radius: 30px;\r\n  /*filter: drop-shadow(0 1px 1px black);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);\r\n  transition: background-color 0.8s;\r\n}\r\n\r\n.selectedWeather {\r\n  display: flex;\r\n  width: 84%;\r\n  justify-content: space-between;\r\n  margin-top: 20px;\r\n}\r\n\r\n.weatherData {\r\n  text-align: start;\r\n  font-size: 20px;\r\n}\r\n\r\n.text p,\r\n.variables p {\r\n  font-size: 20px;\r\n}\r\n\r\n.text {\r\n  margin-right: 16px;\r\n}\r\n\r\n.weatherData .temp {\r\n  font-size: 36px;\r\n}\r\n\r\n.iconAndTemp {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.iconAndTemp p {\r\n  font-size: 30px;\r\n  margin-left: 16px;\r\n  font-weight: 600;\r\n}\r\n\r\n.text {\r\n  display: inline-block;\r\n}\r\n\r\n.variables {\r\n  display: inline-block;\r\n}\r\n\r\n.metaData {\r\n  text-align: end;\r\n}\r\n\r\n.metaData .date {\r\n  font-size: 28px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.city {\r\n  font-size: 20px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.time {\r\n  display: flex;\r\n  justify-content: end;\r\n  align-items: center;\r\n  font-size: 20px;\r\n}\r\n\r\n.hourSection {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  overflow-y: scroll;\r\n  max-width: 84%;\r\n  gap: 50px;\r\n  margin-top: 60px;\r\n  -ms-overflow-style: none; /* IE and Edge */\r\n  scrollbar-width: none; /* Firefox */\r\n  padding-top: 20px;\r\n  scroll-snap-type: inline mandatory;\r\n  cursor: grab;\r\n}\r\n\r\n/* Hide scrollbar for Chrome, Safari and Opera */\r\n.hourSection::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.selected {\r\n  transform: translateY(-10%);\r\n}\r\n\r\n.hourData {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  transition: transform 0.3s, left 0.25s;\r\n  position: relative;\r\n  left: 0px;\r\n  user-select: none;\r\n}\r\n\r\n.hourData:hover {\r\n  transform: translateY(-10%);\r\n}\r\n\r\n.hourData .time,\r\n.hourData .icon,\r\n.hourData .temp {\r\n  pointer-events: none;\r\n}\r\n\r\n.daySlider {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 90%;\r\n}\r\n\r\n.daySection {\r\n  display: flex;\r\n  width: 91%;\r\n  gap: 32px;\r\n  overflow-y: scroll;\r\n  padding-top: 38px;\r\n  padding-bottom: 10px;\r\n  -ms-overflow-style: none; /* IE and Edge */\r\n  scrollbar-width: none; /* Firefox */\r\n\r\n  cursor: grab;\r\n}\r\n\r\n/* Hide scrollbar for Chrome, Safari and Opera */\r\n.daySection::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.dayData {\r\n  padding: 10px;\r\n  background-color: white;\r\n  /*filter: drop-shadow(0 1px 1px black);*/\r\n  border-radius: 30px;\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: 150px;\r\n  width: 300px;\r\n  cursor: pointer;\r\n  transition: transform 0.3s, background-color 0.5s;\r\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);\r\n  position: relative;\r\n  left: 0px;\r\n  user-select: none;\r\n  scroll-snap-align: start;\r\n}\r\n\r\n.dayData:hover {\r\n  transform: translateY(-10%);\r\n}\r\n\r\n.metaAndIcon {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n  margin-top: 10px;\r\n  pointer-events: none;\r\n}\r\n\r\n.meta {\r\n  text-align: start;\r\n}\r\n\r\n.weekday {\r\n  font-size: 28px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.meta .date {\r\n  font-size: 18px;\r\n}\r\n\r\n.tempScale {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 60%;\r\n  justify-content: space-around;\r\n  pointer-events: none;\r\n}\r\n\r\n.spacer {\r\n  font-size: 35px;\r\n}\r\n\r\n.backArrow {\r\n  width: 0px;\r\n  height: 0px;\r\n  border-right: 20px solid white;\r\n  border-top: 20px solid transparent;\r\n  border-bottom: 20px solid transparent;\r\n  cursor: pointer;\r\n  margin-right: 20px;\r\n  position: relative;\r\n  right: 0px;\r\n  transition: right 0.2s, margin-right 0.2s, border-right 0.2s, border-top 0.2s,\r\n    border-bottom 0.2s;\r\n}\r\n\r\n.backArrow:active {\r\n  right: 6px !important;\r\n}\r\n\r\n.backArrow:hover {\r\n  border-right-width: 25px;\r\n  border-top-width: 25px;\r\n  border-bottom-width: 25px;\r\n  margin-right: 15px;\r\n  right: 2.5px;\r\n}\r\n\r\n.forwardArrow {\r\n  width: 0px;\r\n  height: 0px;\r\n  border-left: 20px solid white;\r\n  border-top: 20px solid transparent;\r\n  border-bottom: 20px solid transparent;\r\n  cursor: pointer;\r\n  margin-left: 20px;\r\n  position: relative;\r\n  left: 0px;\r\n  transition: left 0.2s, margin-left 0.2s, border-left 0.2s, border-top 0.2s,\r\n    border-bottom 0.2s;\r\n}\r\n\r\n.forwardArrow:active {\r\n  left: 6px !important;\r\n}\r\n\r\n.forwardArrow:hover {\r\n  border-left-width: 25px;\r\n  border-top-width: 25px;\r\n  border-bottom-width: 25px;\r\n  margin-left: 15px;\r\n  left: 2.5px;\r\n}\r\n\r\n#errorWrapper {\r\n  width: 100%;\r\n  height: 90%;\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 23px;\r\n}\r\n\r\n#errorHeading {\r\n  font-size: 32px;\r\n  font-family: poppins;\r\n}\r\n\r\n#errorText {\r\n  font-size: 20px;\r\n  width: 70%;\r\n  line-height: 1.5;\r\n  font-family: poppins;\r\n}\r\n'],sourceRoot:""}]);const m=p},269:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(i).concat([a]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],s=0;s<n.length;s++){var A=n[s],c=t.base?A[0]+t.base:A[0],l=a[c]||0,d="".concat(c," ").concat(l);a[c]=l+1;var p=e(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var h=o(u,t);t.byIndex=s,r.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);r[s].references--}for(var A=t(n,o),c=0;c<a.length;c++){var l=e(a[c]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=A}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},726:(n,r,e)=>{n.exports=e.p+"35d26b781dc5fda684cc.ttf"},602:(n,r,e)=>{n.exports=e.p+"ac8d04b620e54be9b0f0.ttf"},921:(n,r,e)=>{n.exports=e.p+"34e46962590bff8eefe5.ttf"}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var t=r.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const n=e.p+"videos/clear.mp4",r=e.p+"videos/clearNight.mp4",t=e.p+"videos/cloudy.mp4",o=e.p+"videos/rain.mp4",a=e.p+"videos/snow.mp4",i=e.p+"a0e7a8d91e9d6b2f0a46.svg",s=e.p+"7c6f1d6e71bc62694d68.svg",A=e.p+"f6e2425b137a128bf117.svg",c=e.p+"e45158f2f79593dd25a0.svg",l=e.p+"a42f7cbb0c7206e0afb9.svg",d=e.p+"e56f993727eb41175eae.svg",p=e.p+"3880104ed368f4a51587.svg",u=e=>({getBackgroundLink(){let i="";const s=e.weathercon?e.weathercon:e.getDominatingWeathericon(),A=e.date.getHours();switch(s){case"Clouds":case"Mist":case"Smoke":case"Haze":case"Dust":case"Fog":case"Sand":case"Ash":case"Squall":case"Tornado":i=`${t}`;break;case"Clear":i=A<7||A>20?`${r}`:`${n}`;break;case"Snow":i=`${a}`;break;case"Rain":case"Drizzle":i=`${o}`;break;default:alert("no weathercon set yet")}return i},getIconLink(){let n="";const r=e.weathercon?"hour":"day",t=e.weathercon?e.weathercon:e.getDominatingWeathericon(),o=e.date.getHours();switch(t){case"Clouds":case"Mist":case"Smoke":case"Haze":case"Dust":case"Fog":case"Sand":case"Ash":case"Squall":case"Tornado":n=`${A}`;break;case"Clear":(o<7||o>20)&&"hour"===r?n=`${s}`:("hour"===r||"day"===r)&&(n=`${i}`);break;case"clearNight":n=`${s}`;break;case"Snow":n=`${d}`;break;case"Rain":n=`${c}`;break;case"Drizzle":n=`${l}`;break;case"Thunderstorm":n=`${p}`;break;default:alert("no weathercon set yet")}return n},getBackgroundGradient(){let n="";const r=e.weathercon?e.weathercon:e.getDominatingWeathericon(),t=e.date.getHours();switch(r){case"Clouds":case"Mist":case"Smoke":case"Haze":case"Dust":case"Fog":case"Sand":case"Ash":case"Squall":case"Tornado":case"Thunderstorm":n="rgba(161, 164, 165, 1)0%, rgba(161, 164, 165, 1) 20%, rgba(85, 85, 82, 1) 100%";break;case"Clear":n=t<7||t>20?"rgba(49, 48, 68, 1)0%, rgba(49, 48, 68, 1) 20%,rgba(87, 64, 47, 1) 100%":"rgba(144, 189, 231, 1)0%, rgba(144, 189, 231, 1) 20%,rgba(209, 220, 138, 1) 100%";break;case"Snow":n="rgba(226, 232, 237, 1)0%, rgba(226, 232, 237, 1) 20%,rgba(117, 116, 113, 1) 100%";break;case"Rain":case"Drizzle":n="rgba(74, 90, 72, 1)0%, rgba(74, 90, 72, 1) 20%, rgba(85, 85, 82, 1) 100%";break;default:alert("no weathercon set yet")}return n},getBackgroundColor(){let n="";const r=e.weathercon?e.weathercon:e.getDominatingWeathericon(),t=e.date.getHours();switch(r){case"Clouds":case"Mist":case"Smoke":case"Haze":case"Dust":case"Fog":case"Sand":case"Ash":case"Squall":case"Tornado":case"Thunderstorm":n="rgba(225, 225, 225, 1)";break;case"Clear":n=t<7||t>20?"rgba(241, 230, 224, 1)":"rgba(253, 252, 242, 1)";break;case"Snow":n="rgba(241, 241, 241, 1)";break;case"Rain":case"Drizzle":n="rgba(233, 241, 233, 1)";break;default:alert("no weathercon set yet")}return n}}),h=n=>({getWeekDay:()=>["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][n.date.getDay()],getMonthAndDayDate:r=>n.date.toLocaleDateString(`${r}`,{month:"long",day:"2-digit"})});function f(n){const r=n.dt.getMinutes?n.dt:new Date(1e3*n.dt),e=`${r.getHours()}:${r.getMinutes().toString().length<2?`0${r.getMinutes()}`:r.getMinutes()}`,t=n.main.temp,o=Math.round(100*n.pop),{humidity:a}=n.main,i=n.wind.speed,s=n.weather[0].main;return{date:r,time:e,temperature:t,precipitation:o,humidity:a,windspeed:i,weathercon:s,...u({date:r,time:e,temperature:t,precipitation:o,humidity:a,windspeed:i,weathercon:s})}}function m(n){const{date:r}=n[0];function e(){return n.reduce(((n,r)=>n.temperature<r.temperature?n:r),n[0]).temperature}function t(){return n.reduce(((n,r)=>n.temperature>r.temperature?n:r),n[0]).temperature}function o(){return[n.filter((n=>"Thunderstorm"===n.weathercon)),n.filter((n=>"Drizzle"===n.weathercon)),n.filter((n=>"Rain"===n.weathercon)),n.filter((n=>"Snow"===n.weathercon)),n.filter((n=>{const r=n.date.getHours();if(r>7||r<20)return"Clear"===n.weathercon})),n.filter((n=>{const r=n.date.getHours();if(r<7||r>20)return"Clear"===n.weathercon})),n.filter((n=>"Clouds"===n.weathercon)),n.filter((n=>"Mist"===n.weathercon)),n.filter((n=>"Smoke"===n.weathercon)),n.filter((n=>"Haze"===n.weathercon)),n.filter((n=>"Dust"===n.weathercon)),n.filter((n=>"Fog"===n.weathercon)),n.filter((n=>"Sand"===n.weathercon)),n.filter((n=>"Ash"===n.weathercon)),n.filter((n=>"Squall"===n.weathercon)),n.filter((n=>"Tornado"===n.weathercon))].sort(((n,r)=>r.length-n.length))[0][0].weathercon}return{date:r,data:n,getMinTemp:e,getMaxTemp:t,getDominatingWeathericon:o,...h({date:r,data:n,getMinTemp:e,getMaxTemp:t,getDominatingWeathericon:o}),...u({date:r,data:n,getMinTemp:e,getMaxTemp:t,getDominatingWeathericon:o})}}let g={},C={},E=[],b="celsius";function y(n){g=n}function B(n){C=n}async function x(n,r){return new Promise(((e,t)=>{Promise.all([n,r]).then((n=>{const r=[],t=n[0],o=n[1],a=function(n){const r=[],e=[];n.list.forEach((n=>{r.push(f(n))}));do{const n=r[0].date.getDate(),t=r.filter((r=>r.date.getDate()===n));r.splice(0,t.length),e.push(t)}while(r[0]);return e}(n[1]),i=function(n,r,e,t,o,a,i,s){async function A(){return new Promise(((n,t)=>{fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${e}&lon=${r}&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>n.json())).then((r=>{n(`${r[0].name}, ${r[0].country}`)}),(n=>{t(new Error(n))}))}))}function c(){return`${n.getHours()}:${n.getMinutes().toString().length<2?`0${n.getMinutes()}`:n.getMinutes()}`}return{date:n,temperature:t,precipitation:o,humidity:a,windspeed:i,weathercon:s,getCityNameAndCountryCode:A,getCurrentTime:c,...u({date:n,temperature:t,precipitation:o,humidity:a,windspeed:i,weathercon:s,getCityNameAndCountryCode:A,getCurrentTime:c}),...h({date:n,temperature:t,precipitation:o,humidity:a,windspeed:i,weathercon:s,getCityNameAndCountryCode:A,getCurrentTime:c})}}(new Date(1e3*t.dt),t.coord.lon,t.coord.lat,t.main.temp,Math.round(100*o.list[0].pop),t.main.humidity,t.wind.speed,t.weather[0].main);for(let n=0;n<a.length;n+=1){const e=a[n];r[n]=m(e)}!function(n,r){const e={};e.dt=n.date,e.main={},e.main.temp=n.temperature,e.pop=n.precipitation/100,e.main.humidity=n.humidity,e.wind={},e.wind.speed=n.windspeed,e.weather=[{}],e.weather[0].main=n.weathercon;const t=f(e);if(n.getWeekDay()===r[0].getWeekDay())r[0].data.splice(0,0,t);else{const n=m([t]);r.splice(0,0,n)}}(i,r),e([i,r])}))}))}function w(n){return"celsius"===b?Math.round(3.6*n*100)/100+" km/h":"fahrenheit"===b?Math.round(2.237*n*100)/100+" mph":void 0}function v(n){return"celsius"===b?`${Math.round(n-273.15)}°C`:"fahrenheit"===b?`${Math.round(1.8*(n-273.15)+32)}°F`:void 0}function k(){const n=document.querySelector(".detailed");document.querySelector(".daySlider").replaceChildren();const r=document.querySelector("#error").content.cloneNode(!0);console.log(r),n.replaceChildren(r)}function S(n,r){return new Promise(((e,t)=>{fetch(`https://api.openweathermap.org/geo/1.0/direct?q={${n}},{${r}}&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>{if(200===n.status)return n.json()})).then((n=>{e([n[0].lat,n[0].lon])})).catch((n=>{t(n)}))}))}function D(n,r){return 2===arguments.length?new Promise(((e,t)=>{S(n,r).then((n=>{fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${n[0]}&lon=${n[1]}&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>n.json())).then((n=>Promise.resolve(n))).then((n=>{e(n)})).catch((n=>{t(n)}))})).catch((()=>{k()}))})):1===arguments.length?new Promise(((r,e)=>{fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${n[0]}&lon=${n[1]}&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>n.json())).then((n=>Promise.resolve(n))).then((n=>{r(n)})).catch((n=>{e(n)}))})):void 0}function T(n,r){return 2===arguments.length?new Promise(((e,t)=>{S(n,r).then((n=>{fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${n[0]}&lon=${n[1]}&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>n.json())).then((n=>Promise.resolve(n))).then((n=>{e(n)})).catch((n=>{t(n)}))})).catch((n=>{k()}))})):1===arguments.length?new Promise(((r,e)=>{fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${n[0]}&lon=${n[1]}&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>n.json())).then((n=>Promise.resolve(n))).then((n=>{r(n)})).catch((n=>{e(n)}))})):void 0}function q(n,r){const e=document.createElement("style");switch(n){case"Clear":e.innerHTML=r<7||r>20?'\n        input[type="checkbox"] + label::before {\n          background-color: rgb(241 230 224);\n        }\n        \n        input[type="checkbox"] + label::after {\n          background-color: rgb(136 134 171);\n        }':'\n        input[type="checkbox"] + label::before {\n          background-color: rgb(83 169 231);\n        }\n        \n        input[type="checkbox"] + label::after {\n          background-color: rgb(253 242 162);\n        }';break;case"Snow":case"Rain":case"Drizzle":case"Clouds":case"Mist":case"Smoke":case"Haze":case"Dust":case"Fog":case"Sand":case"Ash":case"Squall":case"Tornado":case"Thunderstorm":e.innerHTML='\n        input[type="checkbox"] + label::before {\n          background-color: rgb(218, 218, 218);\n        }\n        \n        input[type="checkbox"] + label::after {\n          background-color: rgb(255, 255, 255);\n        }';break;default:alert("no weathercon set yet")}document.head.removeChild(document.head.lastChild),document.head.appendChild(e)}async function $(){document.querySelector(".fade").classList.toggle("in"),await new Promise((n=>{window.setTimeout((()=>{n()}),500)}))}async function L(){const n=document.querySelector(".overlay");n.style.transform="translate(-50%, -50%) scale(0)",n.style.opacity="0"}function z(){document.querySelector(".fade").classList.toggle("in"),function(){const n=document.querySelector(".overlay");n.style.transform="translate(-50%, -50%) scale(1)",n.style.opacity="1"}()}function j(){document.querySelector("video").addEventListener("play",z)}const W=e.p+"6fa18895f6e6c7772cab.svg",M=e.p+"38e09fc1c69a6268653c.svg",I=e.p+"c3f55f39c67ba3ac2155.svg",Y=e.p+"4880e187e651a0202cbc.svg";function U(n,r){let e="";return n.data.forEach(((n,t)=>{e+=0!==t?`<div class="hourData" data-index-hour="${t}" data-index-day="${r}">\n                            <p class="time">${n.time}</p>\n                            <img class="icon" src="${n.getIconLink()}" width="70" height="70"/>\n                            <p class="temp">${v(n.temperature)}</p>\n                        </div>`:`<div class="hourData selected" data-index-hour="${t}" data-index-day="${r}">\n                            <p class="time">${n.time}</p>\n                            <img class="icon" src="${n.getIconLink()}" width="70" height="70"/>\n                            <p class="temp ${b}">${v(n.temperature)}</p>\n                        </div>`})),e}async function X(){const n=U(C[0],0),r=function(){let n="";return C.forEach(((r,e)=>{n+=`<div class="dayData${0!==e?"":" selected"}" data-index-day="${e}" style="background-color: ${g.getBackgroundColor()};">\n                      <div class="metaAndIcon">\n                        <div class="meta">\n                            <p class="weekday">${r.getWeekDay()!==g.getWeekDay()?r.getWeekDay():"Today"}</p>\n                            <p class="date">${r.getMonthAndDayDate("DE")}</p>\n                        </div>\n                        <img src="${r.getIconLink()}" width="80" height="80"/>\n                      </div>\n                      <div class="tempScale">\n                      ${r.data.length>1?`<p class="temp min">${v(r.getMinTemp())}</p>\n                      <p class="spacer">-</p>\n                      <p class="temp max">${v(r.getMaxTemp())}</p>`:`<p class="temp">${v(r.data[0].temperature)}</p>`}\n                      </div>\n                    </div>`})),n}(),e=await g.getCityNameAndCountryCode();return q(g.weathercon,g.date.getHours()),document.querySelector("body").innerHTML=`\n  <div class="videoContainer">\n    <video class ="video" autoplay muted loop id="myVideo">\n      <source src="${g.getBackgroundLink()}" type="video/mp4">\n    </video>\n    <div class="fade"></div>\n  </div>\n    <div class="overlay" style="background: linear-gradient(${g.getBackgroundGradient()});">\n      <header>\n        <div class="logo">\n            <img src="${i}" width="50" height="50">\n            <p class="siteName">Weather App</p>\n        </div>\n        <div class="wrapperP">\n                <div class="wrapper">\n                    <div class="searchIcon">\n                        <img src="${Y}" width="35" height="35" id="searchIcon"/>\n                    </div>\n                    <input class="search" lang="DE" type="search" placeholder="Stadt, Landcode(DE)"/>\n                    <div class="suggestions hide">\n                    </div>\n                </div>\n        </div>\n        <div class="toggleSwitch">\n                <input type="checkbox" class="hover-enabled ${b}" id="toggleSwitch" ${"fahrenheit"===b?"checked":""}/>\n                <label for="toggleSwitch"></label>\n        </div>\n        <div class="socials">\n            <a href="https://github.com/DannyRuda" target="_blank" rel="noopener noreferrer"><p class="myName">By DannyRuda</p></a>\n            <a href="https://github.com/DannyRuda" target="_blank" rel="noopener noreferrer">\n              <div class="githubBackground">\n                <img src="${W}" width="35" height="35"/>\n              </div>\n            </a>\n            <a href="https://www.linkedin.com/in/danny-ruda-786967260/" target="_blank" rel="noopener noreferrer">\n              <img src="${M}" width="30" height="30"/>\n            </a>\n        </div>\n      </header>\n      <div class="detailed" style="background-color: ${g.getBackgroundColor()};">\n        <div class="selectedWeather">\n          <div class="weatherData">\n            <div class="iconAndTemp">\n                <img src="${g.getIconLink()}" width="85" height="75" class="icon selected"/>\n                <p class="temp">${v(g.temperature)}</p>\n            </div>\n            <div class="text">\n                <p lang="DE">Niederschlag:</p>\n                <p lang="DE">Luftfeuchte:</p>\n                <p lang="DE">Windgeschw:</p>\n            </div>\n            <div class="variables">\n                <p class="pop">${g.precipitation}%</p>\n                <p class="humid">${g.humidity}%</p>\n                <p class="wind metric">${w(g.windspeed)}</p>\n            </div>\n          </div>\n          <div class="metaData">\n            <p class="date">${g.getWeekDay()}, ${g.getMonthAndDayDate("DE")}</p>\n            <p class="city country">${e}</p>\n            <div class="time">\n                <img src="${I}" width="30" height="30"/>\n                <p class="time">${g.getCurrentTime()}</p>\n            </div>\n          </div>\n      </div>\n      <div class="hourSection">\n        ${n}\n      </div>\n    \n    </div>\n      <div class="daySlider">\n        <div class="backArrow" style="border-right-color: ${g.getBackgroundColor()};">\n\n        </div>\n        <div class="daySection">\n          ${r}\n        </div>\n      <div class="forwardArrow" style="border-left-color: ${g.getBackgroundColor()};">\n\n    </div>\n</div>\n    </div>\n    <template id="error">\n      <div id="errorWrapper">\n        <p id="errorHeading">Location Not Found!</p>\n        <p id="errorText">Sorry, the server didn't find any locations for your query, please check the spelling and try again.</p>\n      </div>\n    </template>`,"test"}function H(n,r){for(const e of n)e.addEventListener("click",r)}async function F(n){await $();const r=document.querySelector(".iconAndTemp .icon"),e=document.querySelector(".iconAndTemp .temp"),t=document.querySelector(".pop"),o=document.querySelector(".humid"),a=document.querySelector(".wind"),i=document.querySelector(".selectedWeather .date"),s=document.querySelector(".selectedWeather .time .time"),{indexDay:A}=n.target.dataset,{indexHour:c}=n.target.dataset,l=c?C[A].data[c]:C[A].data[0],d=C[A];!function(n){const r=document.querySelector("video");document.querySelector("source").src=`${n.getBackgroundLink()}`,r.load()}(l),function(n){const r=document.getElementsByClassName("dayData"),e=document.querySelector(".overlay"),t=document.querySelector(".detailed"),o=document.querySelector(".forwardArrow"),a=document.querySelector(".backArrow");for(const e of r)e.style.backgroundColor=n.getBackgroundColor();e.style.background=`linear-gradient(${n.getBackgroundGradient()})`,t.style.backgroundColor=`${n.getBackgroundColor()}`,o.style.borderLeftColor=`${n.getBackgroundColor()}`,a.style.borderRightColor=`${n.getBackgroundColor()}`}(l),q(l.weathercon,l.date.getHours()),r.src=`${l.getIconLink()}`,e.innerText=v(l.temperature),t.innerText=`${l.precipitation}%`,o.innerText=`${l.humidity}%`,a.innerText=`${w(l.windspeed)}`,i.innerText=`${d.getWeekDay()}, ${d.getMonthAndDayDate("DE")}`,s.innerText=`${l.time}`,j()}async function R(n){await F(n),function(n){let r=document.querySelector(".hourSection").children;!function(n,r){for(const e of n)e.removeEventListener("click",r)}(r,F);const e=n.target.dataset.indexDay,t=U(C[e],e);document.querySelector(".hourSection").innerHTML=t,r=document.querySelector(".hourSection").children,H(r,F),H(r,P)}(n)}function P(n){const r=n.target.classList.item(0),e=document.querySelector(`.${r}.selected`);e&&e.classList.remove("selected"),n.target.classList.add("selected")}function Z(){const n=document.querySelector(".hourSection").children,r=document.querySelector(".daySection").children;H(n,F),H(r,R),H(r,P),H(n,P)}function N(){!function(){const n=document.querySelector('input[type="checkbox"]');var r;n.classList.toggle("hover-enabled"),n.classList.toggle("transition-enabled"),(r=n).classList.contains("celsius")?r.classList.replace("celsius","fahrenheit"):r.classList.replace("fahrenheit","celsius"),window.setTimeout((()=>{n.classList.toggle("transition-enabled"),n.classList.toggle("hover-enabled")}),500)}(),b="celsius"===b?"fahrenheit":"celsius",function(){const n=document.querySelector(".hourData.selected"),{indexDay:r}=n.dataset,{indexHour:e}=n.dataset;!function(n,r){const e=v(C[n].data[r].temperature);document.querySelector(".weatherData .temp").innerText=e}(r,e),function(n,r){const e=w(C[n].data[r].windspeed);document.querySelector(".weatherData .wind").innerText=e}(r,e)}(),function(){const n=document.querySelector(".daySection").children;for(const r of n){const{indexDay:n}=r.dataset,e=C[n];if(e.data.length>1){const n=v(e.getMinTemp()),t=v(e.getMaxTemp()),o=r.querySelector(".min"),a=r.querySelector(".max");o.innerText=n,a.innerText=t}else{const n=v(e.data[0].temperature);r.querySelector(".temp").innerText=n}}}(),function(){const n=document.querySelector(".hourSection").children;for(const r of n){const{indexDay:n}=r.dataset,{indexHour:e}=r.dataset,t=C[n].data[e].temperature,o=r.querySelector(".temp");o.classList.contains("celsius")?o.classList.replace("celsius","fahrenheit"):o.classList.replace("fahrenheit","celsius"),o.innerText=v(t)}}()}function V(){const n=document.querySelector(".daySection"),r=document.querySelector(".hourSection");n.addEventListener("wheel",(n=>{!function(n){const r=document.querySelector(".daySection"),e=window.setInterval((()=>{r.scrollBy(n.deltaY/10,0)}),20);window.setTimeout((()=>{clearInterval(e)}),220)}(n)})),r.addEventListener("wheel",(n=>{r.style.scrollSnapType="none",r.style.scrollBehavior="auto",function(n){const r=document.querySelector(".hourSection"),e=window.setInterval((()=>{r.scrollBy(n.deltaY/10,0)}),20);window.setTimeout((()=>{clearInterval(e)}),220)}(n)}))}function O(n){const{target:r}=n;r.classList.contains("dayData")?(r.parentElement.scrollBy(-n.movementX,0),r.style.left-=n.movementX):r.scrollBy(-n.movementX,0)}function Q(n){n.target.style.pointerEvents="none"}function K(){!function(){const n=document.querySelector(".daySection"),r=n.children;for(const n of r)n.addEventListener("mousedown",(r=>{O(r),n.addEventListener("mousemove",Q)})),n.addEventListener("mouseup",(()=>{n.removeEventListener("mousemove",Q),n.style.pointerEvents="auto"}));n.addEventListener("mousedown",(()=>{n.addEventListener("mousemove",O)})),n.addEventListener("mouseup",(()=>{for(const n of r)n.removeEventListener("mousemove",Q),n.style.pointerEvents="auto";n.removeEventListener("mousemove",O)})),n.addEventListener("mouseleave",(()=>{for(const n of r)n.removeEventListener("mousemove",Q),n.style.pointerEvents="auto";n.removeEventListener("mousemove",O)}))}(),function(){const n=document.querySelector(".hourSection"),r=n.children;for(const n of r)n.addEventListener("mousedown",(r=>{O(r),n.addEventListener("mousemove",Q)})),n.addEventListener("mouseup",(()=>{n.removeEventListener("mousemove",Q),n.style.pointerEvents="auto"}));n.addEventListener("mousedown",(()=>{n.style.scrollBehavior="auto",n.style.scrollSnapType="none",n.addEventListener("mousemove",O)})),n.addEventListener("mouseup",(()=>{for(const n of r)n.removeEventListener("mousemove",Q),n.style.pointerEvents="auto";n.style.scrollBehavior="auto",n.style.scrollSnapType="inline mandatory",n.removeEventListener("mousemove",O)})),n.addEventListener("mouseleave",(()=>{for(const n of r)n.removeEventListener("mousemove",Q),n.style.pointerEvents="auto";n.style.scrollBehavior="smooth",n.style.scrollSnapType="inline mandatory",n.removeEventListener("mousemove",O)}))}()}function _(n){const r=document.querySelector(".daySection"),e=r.children,t="right"==(n.target.classList.contains("forwardArrow")?"right":"left")?352:-352;r.style.scrollBehavior="smooth",r.style.scrollSnapType="inline proximity";for(const n of e)n.style.pointerEvents="none";r.scrollBy(t,0),window.setTimeout((()=>{r.style.scrollBehavior="auto",r.style.scrollSnapType="none";for(const n of e)n.style.pointerEvents="auto"}),300)}function G(){const n=document.querySelector(".forwardArrow"),r=document.querySelector(".backArrow");n.addEventListener("click",_),r.addEventListener("click",_)}let J="",nn="",rn="",en="";function tn(){J=document.querySelector(".search"),en=document.querySelector(".searchIcon"),nn=document.querySelector(".suggestions"),rn=nn.children}function on(n){const r=document.createElement("p");return r.innerText=`${n.name}, ${n.country}`,r.dataset.index=n.index,r}async function an(n){const r=/[`!@#$%^&*()_+\-=\[\]{};':"\\|.<>\/?~]/;"Enter"===n.key&&J.value.length>0&&!r.test(J.value)?An():J.value.length>=1&&!r.test(J.value)?(nn.classList.remove("hide"),await async function(){const n=J.value.toLowerCase();var r;const e=(await(r=n,new Promise(((n,e)=>{fetch(`https://api.openweathermap.org/geo/1.0/direct?q={${r}}&limit=5&appid=d145974fac8fb803900422c2cc1d620e`).then((n=>{if(200===n.status)return n.json()})).then((r=>{n(r)})).catch((n=>{e(n)}))})))).map(((n,r)=>function(n,r){const{name:e}=n,{country:t}=n;return{name:e,country:t,latAndLon:[n.lat,n.lon],index:r}}(n,r))),t=e.map(on);nn.replaceChildren(...t),E=e}(),H(rn,cn)):r.test(J.value)&&"Enter"===n.key?J.value="No Special Characters allowed!":nn.classList.add("hide")}function sn(){en.addEventListener("click",An),J.addEventListener("keyup",an)}async function An(){const n=J.value.split(", "),r=await x(D(n[0],n[1]),T(n[0],n[1]));y(r[0]),B(r[1]),L(),await $(),await X(),j(),tn(),sn(),Z(),document.querySelector("#toggleSwitch").addEventListener("click",N),V(),K(),G()}async function cn(n){const r=await async function(n){const r=n.target,e=E[r.dataset.index].latAndLon;return await x(D(e),T(e))}(n);y(r[0]),B(r[1]),L(),await $(),await X(),j(),tn(),sn(),Z(),document.querySelector("#toggleSwitch").addEventListener("click",N),V(),K(),G()}var ln=e(379),dn=e.n(ln),pn=e(795),un=e.n(pn),hn=e(569),fn=e.n(hn),mn=e(565),gn=e.n(mn),Cn=e(216),En=e.n(Cn),bn=e(589),yn=e.n(bn),Bn=e(917),xn={};xn.styleTagTransform=yn(),xn.setAttributes=gn(),xn.insert=fn().bind(null,"head"),xn.domAPI=un(),xn.insertStyleElement=En(),dn()(Bn.Z,xn),Bn.Z&&Bn.Z.locals&&Bn.Z.locals;var wn=e(426),vn={};vn.styleTagTransform=yn(),vn.setAttributes=gn(),vn.insert=fn().bind(null,"head"),vn.domAPI=un(),vn.insertStyleElement=En(),dn()(wn.Z,vn),wn.Z&&wn.Z.locals&&wn.Z.locals;var kn=e(269),Sn={};Sn.styleTagTransform=yn(),Sn.setAttributes=gn(),Sn.insert=fn().bind(null,"head"),Sn.domAPI=un(),Sn.insertStyleElement=En(),dn()(kn.Z,Sn),kn.Z&&kn.Z.locals&&kn.Z.locals,x(D("sidney","AU"),T("sidney","AU")).then((n=>{y(n[0]),B(n[1])})).then((()=>X())).then((()=>{j(),tn(),sn(),Z(),document.querySelector("#toggleSwitch").addEventListener("click",N),V(),K(),G()})),new Promise(((n,r)=>{navigator.geolocation?navigator.geolocation.getCurrentPosition((r=>{n([r.coords.latitude,r.coords.longitude])}),(n=>{throw r(["düsseldorf","DE"]),n})):r(["düsseldorf","DE"])})).then((n=>x(D(n),T(n)))).catch((n=>x(D(n[0],n[1]),T(n[0],n[1])))).then((n=>{y(n[0]),B(n[1])})).catch((n=>{throw n})).then((()=>(L(),$()))).then((()=>X())).then((()=>{j(),tn(),sn(),Z(),document.querySelector("#toggleSwitch").addEventListener("click",N),V(),K(),G()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,