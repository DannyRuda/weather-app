Für das Projekt relevante Daten, die die api senden kann:

    current weather:
        - weather.main: thunderstorm, drizzle, rain, snow, clear, clouds
        - weather.desciption: more precise description of weather main
        - main.temp: temperatur in kelvin by default, settable to celsius and fahrenheit
        - main.humidity: Luftfeuchtigkeit
        - wind.speed: windgeschwindigkeit in m/s 
        - clouds.all: cloudiness in percent
        - dt: unix time UTC 
        - name: city name 
        - coord.lon: longitude
        - coord.lat: latitude

    5 day 3 hour forecast:
        - list: Array mit objects als items wobei ein object die wetterdaten zu einer Stunde enthält. Fängt vermutlich bei 00:00 UTC des aktuellen tages an und dann im 3 stunden tackt
          each list item contains:
            - dt: unix timestamp in UTC timezone
            - main.temp: Temperatur in kelvin, alternativ celsius oder fahrenheit mit settings
            - main.humidity: Luftfeuchtigkeit
            - weather[0].main: thunderstorm, drizzle, rain, snow, clear, clouds
            - weather.desciption: more precise desciption of weather main
            - clouds.all: cloudiness in %
            - wind.speed: windgeschwindigkeit in m/s
            - pop: niederschlagswahrscheinlichkeit
        - city.name: city name
        - city.country: country code like DE 
        - city.coord.lat: latitude
        - city.coord.lon: longitude


Daten, die in den bereichen der app gebraucht werden

    current weather card
        detailed information:
            - Temperatur current weather
            - niederschlagswahrscheinlichkeit der selected hour oder wenn 
              current weather, dann der closest hour   
            - Luftfeuchtigkeit current weather
            - windgeschwindigkeit current weather
            - wettericon current weather
            - Tag 
            - Datum (Monat Tagesnummer)
            - Stadtname
            - Country code
            - Uhrzeit 
        
        short overview each 3 hours
            - Uhrzeit (03:00 )
            - wettericon
            - Temperatur (Temperatur der Stunde)

    day weather cards
        - lowest temperature of the day
        - highest temperature of the day
        - Day
        - Date (month, tagesnummer)
        - wettericon 


Datenstruktur Variante 1
- ein object für jeden zweck

        object detailedSelectedWeather {
            temperature: 
            precipitation:
            humidity:
            windspeed:
            weathericon:
            day:
            Date:
            Time:
            city:
            country:
        }

        object hourlyOverview {
            Time:
            weathericon:
            temperature:
        }

        object dailyWeather {
            minTemperature:
            maxTemperature:
            day:
            Date:
            weathericon
        }

        detailedSelectedWeather und hourlyOverview ändern Daten abhängig 
        vom ausgewählten Tag und der ausgewählten Stunde. 
        --> entweder bei jedem klick auf stunde oder tag daten neu fetchen oder
            Daten zwischenspeichern in seperaten objects/variablen
        
            let currentweather = fetch(weather) response
            let forecastWeather = fetch(forecast) response

        oder

            object currentWeatherData {
                temperature: 
                precipitation:
                humidity:
                windspeed:
                weathericon:
                day:
                Date:
                Time:
                city:
                country:
            }

            object forecastData {
                city:
                country:
                hours: [
                    {
                        day:
                        date:
                        time:
                        temperature:
                        humidity:
                        weathericon:
                        windspeed:
                        precipitation:
                    },
                    {
                        day:
                        date:
                        time:
                        temperature:
                        humidity:
                        weathericon:
                        windspeed:
                        precipitation:
                    }
                ]
            }


        function write currentWeatherData data in detailedSelectedWeather and
        then write detailedSelectedWeather in dom elements

        function write 

        man merkt schon, viel zu kompliziert 



Datenstruktur Variante 2
    Ein object für current daten und je ein object für einen tag des forecasts jeweils
    mit methoden, die entsprechende werte für die dom elemente liefern

        object currentWeatherData {
            date: new Date(unix*1000)
            lon:
            lat:
            temperature: 
            precipitation:
            humidity:
            windspeed:
            weathercon:

            function getMonthAndDayDate(languageTag) {
                return new Date(null,this.date.getMonth(),this.date.getDate()).toLocalDateString(`${languageTag}`, {month:'long'})
            }

            async function getCityNameAndCountryCode() {
                return fetch(api url with lon and lat)
            }

            function getCurrentTime() {
                return `${this.date.getHours()}:${this.date.getMinutes()}`
            }

            function getWeekday() {
                const week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                return week[this.date.getDay()];
            }

            function getIconName() {

            }
        }

        object dayOne {
            day:
            date:
            data: [
                {
                    time:
                    temperature:
                    precipitation:
                    humidity:
                    windspeed:
                    weathercon:   
                },
                {
                    time:
                    temperature:
                    precipitation:
                    humidity:
                    windspeed:
                    weathercon: 
                },
                ...
            ]

            function getMinTemp() {
                return data.reduce((accum,current)=> accum < current ? accum : current);
            }

            function getMaxTemp() {
                return data.reduce((accum,current)=> accum > current ? accum : current);
            }

            function getDominatingWeathericon() {
                let thunder = 0;
                let drizzle = 0;
                let cntRain = 0;
                let cntSnow = 0;
                let cntClear = 0;
                let cntClouds = 0;
                data.forEach((element)=>{
                    switch(element.weathercon) {
                        case 'thunderstorm': 
                            Thunder += 1;
                    }
                })
            }

            function getCurrentTime() {
                return `${date.getHours()}:${date.getMinutes()}`
            }
        }

        object daytwo {
            day:
            date:
            data: [
                {
                    time:
                    temperature:
                    precipitation:
                    humidity:
                    windspeed:
                    weatherIconName:   
                },
                {
                    time:
                    temperature:
                    precipitation:
                    humidity:
                    windspeed:
                    weatherIconName: 
                },
                ...
            ]

            function getMinTemp()

            function getMaxTemp()

            function getDominatingWeathericon()
        }


Funktionen um daten aus api response in die objects zu verstauen

function createCurrentWeather(date,lon,lat,temperature,precipitation,humidity,windspeed,weathercon) {
    
    function getMonthAndDayDate(languageTag) {
        return new Date(null,this.date.getMonth(),this.date.getDate()).toLocalDateString(`${languageTag}`, {month:'long'})
    } 

    async function getCityNameAndCountryCode() {
        return fetch(api url with lon and lat)
    }

    function getCurrentTime() {
        return `${date.getHours()}:${this.date.getMinutes()}`
    }

    function getWeekday() {
        const week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        return week[date.getDay()];
    }

    function getIconName() {

    }

    return {temperature,precipitation,humidity,windspeed,getCityNameAndCountryCode,getMonthAndDayDate,getCurrentTime,getWeekday,getIconName}
}


function create


async function createObjects() {
    Promise.all(promise current weather,promise forecast)
    .then((values)=>{
        const currentData = values[0];
        const forecast = values[1];
        createCurrentWeather(
            currentData.dt,
            currentData.coord.lon,
            currentData.coord.lat,
            currentData.main.temp,
            forecast.list[0].pop,
            currentData.main.humidity,
            currentData.wind.speed,
            currentData.weather[0].main
        );

    })
}